version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: prodscribe-postgres
    environment:
      POSTGRES_DB: prodscribe
      POSTGRES_USER: prodscribe
      POSTGRES_PASSWORD: prodscribe123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - prodscribe-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U prodscribe -d prodscribe"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (NestJS)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: prodscribe-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://prodscribe:prodscribe123@postgres:5432/prodscribe
      PORT: 3001
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - prodscribe-network
    command: npm run start:dev

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: prodscribe-frontend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_APP_URL: http://localhost:3000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - prodscribe-network
    command: npm run dev

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: prodscribe-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - prodscribe-network
    command: redis-server --appendonly yes

  # Nginx (reverse proxy for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: prodscribe-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - prodscribe-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  prodscribe-network:
    driver: bridge 