name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: prodscribe_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        
    - name: Run linting
      run: |
        cd backend
        npm run lint
        
    - name: Run type checking
      run: |
        cd backend
        npm run type-check
        
    - name: Run tests
      run: |
        cd backend
        npm run test:ci
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/prodscribe_test
        
    - name: Build application
      run: |
        cd backend
        npm run build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/dist
        retention-days: 7

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        
    - name: Build application
      run: |
        cd backend
        npm run build
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment logic here
        # Example: Deploy to Docker registry, cloud platform, or custom server

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        
    - name: Build application
      run: |
        cd backend
        npm run build
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add your production deployment logic here
        # Example: Deploy to Docker registry, cloud platform, or custom server 